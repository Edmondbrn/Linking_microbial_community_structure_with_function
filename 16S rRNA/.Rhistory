# # Write the combined ASV sequences to a single fasta file
writeXStringSet(top_cluster, file = paste0("control_samples_analysis/output_sequence_corncob/", file_name, ".fasta"))
}
tax_table_data$Product_clean = sapply(tax_table_data$Product, simplify_product)
tax_table_data$phylum = tax_table_data$Product_clean # because ampvis remove other column than classical one
model$data@tax_table = tax_table(as.matrix(tax_table_data))
physeq_mibig = model$data
ampvis_mibig = amp_load(physeq_mibig)
library(ampvis2)
ampvis_mibig = amp_load(physeq_mibig)
saveRDS(ampvis_mibig, "ressources/RDS/ampvis2_rhizoplanes_week4_irrigation_mibig.rds")
# heatmap for product
amp_heatmap(ampvis_mibig,
group_by = "Irrigation",
tax_aggregate = "Phylum",
facet_by = "Irrigation",
plot_values = F,
tax_show = 30,
color_vector = c("royalblue4", "whitesmoke", "darkred")) +
theme(strip.background = element_rect(fill = "darkgray"),
strip.text = element_text(color = "black", size = 17),
axis.text = element_text(family = "serif"),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 25),
legend.title = element_text(size = 17),
legend.text = element_text(size = 15),
panel.spacing = unit(0.1, "lines"),
axis.ticks.length = unit(0.1, "cm"),
plot.margin = margin(1, 10, 1, 10, "cm")) + # adjust the margin to reduce the heatmap
scale_x_discrete(expand = c(0.01, 0.01))  # reduce space between columns
DF_mibig = plot_res_mibig(model, "Rhizoplane week 4 irrigation", 9)
model
model
model = readRDS("ressources/RDS/corncob_rhizoplane_week4_irrigation.rds")
model
DF_mibig = plot_res_mibig(model, "Rhizoplane week 4 irrigation", 9)
library(corncob)
DF_mibig = plot_res_mibig(model, "Rhizoplane week 4 irrigation", 9)
plot(model)
plot(model, level = "phylum")
DF_mibig = plot_res_mibig(model, "Rhizoplane week 4 irrigation", 9)
plot_res_mibig = function(model, title, size){
if (length(model$significant_taxa) ==  0)
return("Error, no significant taxa found")
print("Ã©test2")
df = plot(model, total = T, B = 1000, level = c("Product_clean"), dataonly = T)
print("tezst")
DF = df$data
DF$title = title
DF$taxa = tolower(DF$taxa)
if (length(grep("_", DF$taxa)) == 1){ # test if there is no ASV number in the data, it happens some time
for (i in 1:length(DF$taxa)){
DF$taxa[[i]] =  gsub(".*", paste0(DF$taxa[[i]] ," (", model$significant_taxa[[i]],")"), DF$taxa[[i]])
}
}
if (dim(DF)[1]>80){
DF = DF %>% arrange(taxa) # sort the table before the slicing
DF1 = DF[1:dim(DF)[1] / 2 +1,]
DF2 = DF[(dim(DF)[1]  / 2 ):dim(DF)[1],]
# Divide the datframe into two
# plot according to the treatment
plot1 = plot_point(DF1, size)
plot2 = plot_point(DF2, size)
plot_merge = ggpubr::ggarrange(plot1, plot2, ncol = 2, common.legend = TRUE, legend = "right", widths = c(0.4, 0.4))
print(plot_merge)
ggsave(paste0("output/", title, ".png"), plot = plot_merge)
}
else{
plot = plot_point(DF, size)
print(plot)
ggsave(paste0("output/", title, ".png"), plot = plot, width = 10, height = 10)
}
return(DF)
}
DF_mibig = plot_res_mibig(model, "Rhizoplane week 4 irrigation", 9)
model = readRDS("ressources/RDS/corncob_rhizoplane_week4_irrigation.rds")
df_blast_mibig = read.csv("ressources/data/full_cluster_mibig_blast.txt", sep = "\t", row.names = 1)
good_tax = model$significant_taxa # extract the significant taxa (amplicon_cluster)
model$data@tax_table = model$data@tax_table[rownames(model$data@tax_table) %in% good_tax,] # filtering
model$data@otu_table = model$data@otu_table[rownames(model$data@tax_table),]
df_blast_mibig = df_blast_mibig[rownames(model$data@tax_table),]
tax_table_data = as.data.frame(model$data@tax_table)
tax_table_data$Product = as.vector(df_blast_mibig$Compound)
tax_table_data$Organism = as.vector(df_blast_mibig$Organism)
tax_table_data$Product_clean = sapply(tax_table_data$Product, simplify_product)
tax_table_data$phylum = tax_table_data$Product_clean # because ampvis remove other column than classical one
model$data@tax_table = tax_table(as.matrix(tax_table_data))
physeq_mibig = model$data
ampvis_mibig = amp_load(physeq_mibig)
saveRDS(ampvis_mibig, "ressources/RDS/ampvis2_rhizoplanes_week4_irrigation_mibig.rds")
DF_mibig = plot_res_mibig(model, "Rhizoplane week 4 irrigation", 9)
plot_res_mibig = function(model, title, size){
if (length(model$significant_taxa) ==  0)
return("Error, no significant taxa found")
df = plot(model, total = T, B = 1000, level = c("Product_clean"), dataonly = T)
print("tezst")
DF = df$data
DF$title = title
DF$taxa = tolower(DF$taxa)
if (length(grep("_", DF$taxa)) == 1){ # test if there is no ASV number in the data, it happens some time
for (i in 1:length(DF$taxa)){
DF$taxa[[i]] =  gsub(".*", paste0(DF$taxa[[i]] ," (", model$significant_taxa[[i]],")"), DF$taxa[[i]])
}
}
if (dim(DF)[1]>80){
DF = DF %>% arrange(taxa) # sort the table before the slicing
DF1 = DF[1:dim(DF)[1] / 2 +1,]
DF2 = DF[(dim(DF)[1]  / 2 ):dim(DF)[1],]
# Divide the datframe into two
# plot according to the treatment
plot1 = plot_point_mibig(DF1, size)
plot2 = plot_point_mibig(DF2, size)
plot_merge = ggpubr::ggarrange(plot1, plot2, ncol = 2, common.legend = TRUE, legend = "right", widths = c(0.4, 0.4))
print(plot_merge)
ggsave(paste0("output/", title, ".png"), plot = plot_merge)
}
else{
plot = plot_point_mibig(DF, size)
print(plot)
ggsave(paste0("output/", title, ".png"), plot = plot, width = 10, height = 10)
}
return(DF)
}
DF_mibig = plot_res_mibig(model, "Rhizoplane week 4 irrigation", 9)
tax_table_df = as.data.frame(model$data@tax_table)
products_double = tax_table_df %>% count(Product_clean) %>% filter(n > 1, Product_clean != "NaN") # get the compound with at least two occurences
product_twice = tolower(products_double$Product_clean) # for the selection
loop = dim(DF_mibig)[1]
keep_index = c()
compound = c()
for(i in 1:loop){
trim_product <- trimws(strsplit(DF_mibig$taxa[i], "\\(")[[1]][1])
compound = c(compound, trim_product)
if (trim_product %in% product_twice){
keep_index = c(keep_index, i) # index with a double compounds
}
}
DF_mibig$simple_product = compound
DF_mibig2 = DF_mibig[keep_index,]
DF_mibig3<-DF_mibig2  # change the ordrer frol taxa to x
DF_mibig3$taxa_clean = gsub("amplicon_cluster", "AC",DF_mibig3$taxa) # replace amplicon_cluster by AC
DF_mibig3 = DF_mibig3 %>% mutate(taxa_clean = fct_reorder(taxa_clean, x)) # reorder the taxa by x
install.packages("forcats")
DF_mibig3 = DF_mibig3 %>% mutate(taxa_clean = fct_reorder(taxa_clean, x)) # reorder the taxa by x
library(forcats)
DF_mibig3 = DF_mibig3 %>% mutate(taxa_clean = fct_reorder(taxa_clean, x)) # reorder the taxa by x
DF_mibig3$OTU
mibig_annotation = read.csv("ressources/data/full_cluster_mibig_blast.txt", sep = "\t")
#Subset the ampvis object
DF_mibig3$OTU<-str_split_fixed(DF_mibig3$taxa," \\(",2) [,2]
install.packages("stringR")
install.packages("stringr")
install.packages("stringr")
library(stringr)
#Subset the ampvis object
DF_mibig3$OTU<-str_split_fixed(DF_mibig3$taxa," \\(",2) [,2]
DF_mibig3$OTU<-gsub("\\)","",DF_mibig3$OTU)
DF_mibig3$OTU<-factor(reorder(DF_mibig3$OTU,desc(DF_mibig3$x)))
# DF_mibig3$genus = as.data.frame(physeq4week@tax_table)$genus[rownames(physeq4week@tax_table) %in% DF_mibig3$OTU] # dom2BGC
DF_mibig3$genus = strsplit(mibig_annotation$Organism[mibig_annotation$Query %in% DF_mibig3$OTU], " ") # mibig
DF_mibig3$genus = sapply(DF_mibig3$genus, function(x) x[1])
distinct_colors <- c("red", "blue", "green", "purple", "orange", "brown", "pink", "cyan", "yellow", "black")
diff_plot<-DF_mibig3  %>% ggplot(aes(x = x, y = taxa_clean)) + geom_point(color = "black")+
geom_errorbar(aes(xmin = xmin, xmax = xmax, color = genus), width = 0.2) +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
geom_hline(yintercept = 17.5, linetype = "solid", color = "black") +
theme_linedraw() +
theme_bw()+
labs(x = "", y = "") + # remove the axis labels
theme(axis.text.y = element_text(angle = 0, hjust = 1, size = 15, family = "serif"),
panel.grid = element_blank())+
theme(axis.text.x = element_text(angle = 0, hjust = 1, size = 15), strip.text = element_text(size = 20, family = "serif"),
plot.margin = unit(c(0.5,0.5,0.5,1.5), "cm"),
legend.position = "bottom",
legend.text = element_text(size = 15),
legend.title = element_text(size = 18))+
scale_color_manual(values = distinct_colors)
diff_plot
# normalisation from the original phyloseq object (with all ASVs)
otu_physeq = physeq@otu_table
otu_physeq = transform_sample_counts(otu_physeq, function(x) x / sum(x) * 100) # normalisation to 100%
physeq_propor = otu_table(otu_physeq)
physeq_propor = merge_phyloseq(physeq_propor, tax_table(physeq), sample_data(physeq))
ampvis_total = amp_load(physeq_propor)
amp_mibig_un = ampvis_total %>%
amp_subset_taxa(tax_vector = DF_mibig3$OTU, normalise = FALSE) # already normalised
amp_mibig_un$abund
heat_mibig<-amp_mibig_un%>% amp_heatmap(
group_by = "Irrigation",
tax_aggregate = "OTU",
facet_by = "Irrigation",
plot_values = T,
normalise = F,
tax_show = 25,
color_vector = c("royalblue4", "whitesmoke", "darkred")) +
theme(strip.background = element_rect(fill = "darkgray"),
strip.text = element_text(color = "black", size = 17),
axis.text = element_text(family = "serif"),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 15),
legend.text = element_text(size = 12),
panel.spacing = unit(0.1, "lines"),
axis.ticks.length = unit(0.1, "cm"),
plot.margin = margin(1, 10, 1, 10, "cm")) + # adjust the margin to reduce the heatmap
scale_x_discrete(expand = c(0.01, 0.01))
taxa_o<-heat_mibig$data$Display
unique(taxa_o)
taxa_o<-levels(droplevels(taxa_o))
levels(DF_mibig3$OTU)
taxa_re[order(ordered(taxa_re, levels =taxa_re))]
taxa_re<-factor(levels(DF_mibig3$OTU))
amp_mibig_un$metadata$Irrigation = ifelse(amp_mibig_un$metadata$Irrigation == "Drought", "Drought", "Control")
amp_mibig_un$metadata$Irrigation = factor(amp_mibig_un$metadata$Irrigation, levels = c("Drought", "Control")) # reorder to have control on the right
heat_forcom<-amp_mibig_un%>% amp_heatmap(
group_by = "Irrigation",
tax_aggregate = "OTU",
#tax_add ="Phylum",
facet_by = "Irrigation",
order_y_by = rev(taxa_re),
plot_values = T,
normalise = F,
tax_show = 25,
round = 3,
color_vector = c("#87ed7e", "white", "red")) +
theme(strip.background = element_rect(fill = "darkgray"),
strip.text = element_text(color = "black", size = 17),
axis.text = element_text(family = "serif"),
axis.text.x = element_blank(),
axis.text.y = element_blank(), #element_text(size = 12),
legend.title = element_text(size = 15),
legend.text = element_text(size = 12),
panel.spacing = unit(0.1, "lines"),
axis.ticks.length = unit(0.1, "cm"),
plot.margin = margin(1, 1, 1, 1, "cm")) + # adjust the margin to reduce the heatmap
scale_x_discrete(expand = c(0.01, 0.01))
heat_forcom
x11(width = 12, height = 8)
diff_plot + heat_forcom
library(patchwork)
x11(width = 12, height = 8)
diff_plot + heat_forcom
heat_forcom<-amp_mibig_un%>% amp_heatmap(
group_by = "Irrigation",
tax_aggregate = "OTU",
#tax_add ="Phylum",
facet_by = "Irrigation",
order_y_by = rev(taxa_re),
plot_values = T,
normalise = F,
tax_show = 25,
round = 3,
color_vector = c("lightblue", "white", "red")) +
theme(strip.background = element_rect(fill = "darkgray"),
strip.text = element_text(color = "black", size = 17),
axis.text = element_text(family = "serif"),
axis.text.x = element_blank(),
axis.text.y = element_blank(), #element_text(size = 12),
legend.title = element_text(size = 15),
legend.text = element_text(size = 12),
panel.spacing = unit(0.1, "lines"),
axis.ticks.length = unit(0.1, "cm"),
plot.margin = margin(1, 1, 1, 1, "cm")) + # adjust the margin to reduce the heatmap
scale_x_discrete(expand = c(0.01, 0.01))
x11(width = 12, height = 8)
diff_plot + heat_forcom
knitr::opts_chunk$set(echo = TRUE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set the working directory to the location of this script
path = paste0(getwd(), "/data") # CHANGE ME to the directory containing the fastq files after unzipping.
list.files(path)
fnFs <- sort(list.files(path, pattern="_1.fastq.gz", full.names = TRUE))
fnFsR <- sort(list.files(path, pattern="_2.fastq.gz", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), function(x) paste(x[1:2], collapse="_"))
list.files(path)
path
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # working on Rstudio only
physeq_rare_mean = readRDS("ressources/RDS/df_rare_mean.rds")
getwd()
physeq_rare_median = readRDS("ressources/RDS/Rarefied_physeq_median.rds")
physeq_rare_mean_rounded = readRDS("ressources/RDS/Rarefied_physeq_mean_rounded.rds")
alpha_box_plot = function(data, x_var,y_var, col, comparizon, nb_test = 1, name){
method = ifelse(shapiro.test(data[[y_var]])$p > 0.05, "t.test", "wilcox.test") # set the test for the comparizon
symnum = list(cutpoints = c(0, 0.0001/nb_test, 0.001/nb_test, 0.01/nb_test, 0.05/nb_test, Inf), symbols = c("****", "***", "**", "*", "")) # format the output according to the correction
p = ggplot(data = data, aes(x = !!sym(x_var), y = !!sym(y_var)))+
scale_fill_manual(values=c("#018571","#a6611a"))+
geom_boxplot(aes(fill = !!sym(x_var)))+
geom_point(aes(x = !!sym(x_var), y = !!sym(y_var), fill= !!sym(x_var)),size = 2,alpha = 0.8, shape = 21, position = position_jitterdodge())+
theme_bw()+
# facet_grid(~ Week, scales = "free") + # organise the plot by week
theme(axis.text.x = element_text(hjust = 1, size = 20, angle = 0),
axis.text.y = element_text(size = 20),
legend.title = element_text(size = 20),
legend.text = element_text(size = 18),
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
strip.text = element_text(size = 15)) +
ylim(c(min(data[[y_var]]) - 0.1 * min(data[[y_var]]) , max(data[[y_var]]) + 0.1 *max(data[[y_var]]))) +
labs(x = "", y = "")+
stat_compare_means(method = method ,symnum.args = symnum, label = "p.signif", size = 12, label.x = 1.5, label.y = max(data[[y_var]]) )
ggsave(paste0("output/alpha_diversity_",name ,"_", y_var, ".png"), plot = p, width = 25, height = 15, units = "cm")
return(p)
}
physeq_rare_mean_rounded@sam_data$Week = ifelse(physeq_rare_mean_rounded@sam_data$Week== 2, "week 2",
ifelse(physeq_rare_mean_rounded@sam_data$Week == 4, "week 4", "week 5"))
alpha_div = estimate_richness(physeq_rare_mean_rounded, measures = c("Shannon", "Chao1")) # compute alpha diversity
alpha_div = cbind(alpha_div, physeq_rare_mean_rounded@sam_data) # add the factor to the new table
comparison = list(c("Watered", "Drought")) # change this according to the variable you want to compare
alpha_div_2week = alpha_div %>% filter(Week == "week 2")
alpha_div_4week = alpha_div %>% filter(Week == "week 4")
alpha_div_5week = alpha_div %>% filter(Week == "week 5")
p1 = alpha_box_plot(data = alpha_div_2week, x_var = "Irrigation",
y_var = "Shannon",
col = "Irrigation",
comparizon = comparison ,
nb_test = nb_test,
name = "control")
p2 = alpha_box_plot(data = alpha_div_4week, x_var = "Irrigation",
y_var = "Shannon",
col = "Irrigation",
comparizon = comparison ,
nb_test = nb_test,
name = "control")
p3 = alpha_box_plot(data = alpha_div_5week, x_var = "Irrigation",
y_var = "Shannon",
col = "Irrigation",
comparizon = comparison ,
nb_test = nb_test,
name = "control")
x11(height = 10, width = 10)
pfinal = ggarrange(p2, p3, ncol = 1, nrow = 2,
labels = c("Week 4", "Week 5"), label.x = -0.025,
common.legend = TRUE, legend = "none")
p3
p2 = alpha_box_plot(data = alpha_div_4week, x_var = "Irrigation",
y_var = "Shannon",
col = "Irrigation",
comparizon = comparison ,
nb_test = nb_test,
name = "control")
p2
nb_test = 2  # for Bonferonni correction
p3 = alpha_box_plot(data = alpha_div_5week, x_var = "Irrigation",
y_var = "Shannon",
col = "Irrigation",
comparizon = comparison ,
nb_test = nb_test,
name = "control")
p3
x11(height = 10, width = 10)
pfinal = ggarrange(p2, p3, ncol = 1, nrow = 2,
labels = c("Week 4", "Week 5"), label.x = -0.025,
common.legend = TRUE, legend = "none")
pfinal
x11(height = 10, width = 10)
(pfinal = ggarrange(p2, p3, ncol = 1, nrow = 2,
labels = c("Week 4", "Week 5"), label.x = -0.025,
common.legend = TRUE, legend = "none"))
knitr::opts_chunk$set(echo = TRUE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set the working directory to the location of this script
# Import data
df_feature = read.csv("ressources/data/otu_table_merged_transpose.csv")
knitr::opts_chunk$set(echo = TRUE)
library(phyloseq)
library(ampvis2)
library(ggplot2)
library(vegan)
library(dplyr)
library(rprojroot)
library(ggpubr)
library(plotly)
library(vegan)
# format the html output
library(kableExtra)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set the working directory to the location of this script
df_feature = read.csv("ressources/data/otu_table_merged_transpose.csv")
df_tax = read.csv("ressources/data/tax_table_merged.csv", sep = ";")
df_meta = read.csv("ressources/data/metadata1.csv")
df_feature = df_feature %>%
tibble::column_to_rownames("ASV") # format the table for phyloseq
df_tax = df_tax %>%
tibble::column_to_rownames("ASV")
df_meta = df_meta %>%
tibble::column_to_rownames("Sample_ID")
otu_mat = as.matrix(df_feature) # format again
tax_mat = as.matrix(df_tax)
OTU = otu_table(otu_mat, taxa_are_rows = TRUE)
TAX = tax_table(tax_mat)
samples = sample_data(df_meta)
physeq = phyloseq(OTU, TAX, samples)
physeq = subset_taxa(physeq, Kingdom == "Bacteria") # remove non-bacterial sequences
physeq = subset_taxa(physeq, Family != "mitochondria") # remove mitochondria sequences
physeq = subset_taxa(physeq, Family != "chloroplast" ) # remove chloroplaste sequences
# the line to filter the data to keep only the control samples
physeq = subset_samples(physeq, Treatment == "Water")
physeq@sam_data$Week = as.factor(physeq@sam_data$Week)
ampvis_data = amp_load(physeq)
saveRDS(physeq, file = "output/physeq_ctrl.rds")
physeq = phyloseq(OTU, TAX, samples)
physeq
physeq = subset_taxa(physeq, Kingdom == "Bacteria") # remove non-bacterial sequences
physeq
physeq = subset_taxa(physeq, Family != "mitochondria") # remove mitochondria sequences
physeq
physeq = subset_taxa(physeq, Family != "chloroplast" ) # remove chloroplaste sequences
physeq
physeq = subset_taxa(physeq, Class != "chloroplast" ) # remove chloroplaste sequences
physeq
physeq = subset_taxa(physeq, Order != "chloroplast" ) # remove chloroplaste sequences
physeq
physeq = subset_taxa(physeq, Class != "Chloroplast" ) # remove chloroplaste sequences
physeq
physeq = subset_taxa(physeq, Order != "Chloroplast" ) # remove chloroplaste sequences
physeq
physeq = phyloseq(OTU, TAX, samples)
physeq
physeq = subset_taxa(physeq, Class != "Chloroplast" ) # remove chloroplaste sequences
physeq
physeq = subset_taxa(physeq, Family != "mitochondria") # remove mitochondria sequences
physeq
physeq = subset_taxa(physeq, Kingdom == "Bacteria") # remove non-bacterial sequences
physeq
# the line to filter the data to keep only the control samples
physeq = subset_samples(physeq, Treatment == "Water")
physeq@sam_data$Week = as.factor(physeq@sam_data$Week)
ampvis_data = amp_load(physeq)
saveRDS(physeq, file = "output/physeq_ctrl.rds")
physeq
Rarecurve = function(data, col, type) {
cat("Creating rarefaction curve for ", type, " samples\n")
p3 = amp_rarecurve(data, color_by = col, stepsize = 100, facet_by = "Treatment")
p3 = p3 + theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 20),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15)) +
theme(axis.text = element_text(angle = 0, hjust = 0.5, size = 14),
axis.title = element_text(size = 20),
axis.text.y = element_text(angle = 0),
strip.text = element_text(size = 20),
legend.text = element_text(size = 18),  # Agrandir le texte du titre de chaque facette + # Mettre les graduations Ã  l'horizontale et les agrandir
legend.title = element_text(size = 20))+
labs(y = "Number of ASVs")+
geom_line(linewidth = 1.5)
cat("Saving the plot\n")
ggsave(paste0("output/rarefaction_curve_control_", type ,".png"), width = 10, height = 10)
return(p3)
}
ampvis_data$metadata$Week = ifelse(ampvis_data$metadata$Week == 2, "week 2",
ifelse(ampvis_data$metadata$Week == 4, "week 4", "week 5"
))
p1 = Rarecurve(data = ampvis_data, col = "Week", type = "Rhizoplane")
rarefied_physeq_list = list() # a list to store the rarefied phyloseq objects
for (i in 1:100) {
rarefied_physeq = rarefy_even_depth(physeq, sample.size = 0.9 * min(sample_sums(physeq)), rngseed = i)
rarefied_physeq_list[[i]] <- rarefied_physeq
cat("Loop number: \r", i, "out of 100")
}
otu_tables = lapply(rarefied_physeq_list, function(x) otu_table(x)) # regroup all the otu_tables in a list
cat("All the rarefied phyloseq objects have been created")
cat("Converting otu_tables to dataframes...")
for (i in 1:length(otu_tables)) { # convert all the otu_tables to dataframes
otu_tables[[i]] = as.data.frame(otu_tables[[i]])
otu_tables[[i]]$ASV = rownames(otu_tables[[i]])
cat("Loop number: \r", i, "out of 100")
}
cat("Dataframes created")
cat("Concatenating dataframes...")
df_rare = as.data.frame(otu_tables[[1]]) # create a dataframe with the first otu_table for later
for (i in 2:length(otu_tables)) { # Concatenate all the dataframes vertically
df_rare = rbind(df_rare, as.data.frame(otu_tables[[i]]))
cat("Loop number: \r", i, "out of 100")
}
cat("Rarefied dataframe created")
cat("Calculating mean and median...")
# Regroup rows by NAME and calculate the mean and median
df_rare_mean = df_rare %>% group_by(ASV) %>% summarise(across(everything(), list(mean = mean)))
df_rare_median = df_rare %>% group_by(ASV) %>% summarise(across(everything(), list(median = median)))
names(df_rare_mean) = sub("_mean", "", names(df_rare_mean)) # Remove mean and median to column names
names(df_rare_median) = sub("_median", "", names(df_rare_median))
df_rare_mean <- df_rare_mean %>%
tibble::column_to_rownames("ASV")
df_rare_median <- df_rare_median %>%
tibble::column_to_rownames("ASV")
df_rare_mean = otu_table(df_rare_mean, taxa_are_rows = TRUE)
df_rare_median = otu_table(df_rare_median, taxa_are_rows = TRUE)
Rarefied_physeq_mean = phyloseq(df_rare_mean, TAX, samples) # create another phyloseq object with rarefied data as OTU table
Rarefied_physeq_median = phyloseq(df_rare_median, TAX, samples)
otu_data = round(otu_table(Rarefied_physeq_mean))
# In case where we have float number in mean (for richness), we round the number to have an integer
Rarefied_physeq_mean_rounded <- phyloseq(otu_data, TAX, samples)
saveRDS(Rarefied_physeq_mean_rounded, file = "ressources/RDS/Rarefied_physeq_mean_rounded.rds")
saveRDS(Rarefied_physeq_median, file = "ressources/RDS/Rarefied_physeq_median.rds")
saveRDS(df_rare_mean, file = "ressources/RDS/df_rare_mean.rds")
reads_data = read.csv("ressources/track.txt", sep = "\t")
reads_data = read.csv("ressources/track.txt", sep = "\t")
reads_data = read.csv("ressources/data/track.txt", sep = "\t")
number_ASV = colSums(df_feature)
reads_data = cbind(reads_data, df_meta) # add metadata to the reads data
reads_data$ASV = number_ASV
table = reads_data %>%
filter(Treatment == "Water") %>% # remove this line to get data for all the samples
group_by() %>%
summarise(mean_reads = mean(nonchim), median_reads = median(nonchim), reads_number = sum(nonchim),
min_reads = min(nonchim), max_reads = max(nonchim), ASV_sum = sum(ASV), samples = n())
table = as.data.frame(table)
table %>%
kable("html", caption = "Descriptive Statistics") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F)
prune_taxa(taxa_sums(physeq)>0,physeq)
physeq_f<-prune_taxa(taxa_sums(physeq)>0,physeq)
saveRDS(physeq_f, file = "output/physeq_ctrl.rds")
